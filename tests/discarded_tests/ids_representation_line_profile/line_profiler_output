Timer unit: 1e-06 s

Total time: 0.001552 s
File: run.py
Function: forward at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           @profile
     4                                           def forward(input, prepNN, afterNN, aggregation_func):    
     5         1          7.0      7.0      0.5      ids = input[1]
     6         1          1.0      1.0      0.1      input = input[0]
     7         1        302.0    302.0     19.5      NN_out = prepNN(input) # Forward all instances through neural network
     8                                               # print(NN_out)
     9                                               
    10         1         33.0     33.0      2.1      inner_ids = ids[len(ids)-1]
    11                                               # print(inner_ids)
    12                                               # Numpy version of this segment is faster on CPU (cca 2x - 3x faster .. the differenec is more significatn for longer arrays)
    13                                               # start = time.time()
    14         1         95.0     95.0      6.1      unique, inverse, counts = torch.unique(inner_ids, sorted = True, return_inverse = True, return_counts = True)
    15         1        260.0    260.0     16.8      idx = torch.cat([(inverse == x).nonzero()[0] for x in range(len(unique))]).sort()[1]
    16         1         69.0     69.0      4.4      bags = unique[idx]
    17         1         13.0     13.0      0.8      counts = counts[idx]
    18                                               # print('Unique | Elapsed time: {}'.format(time.time()-start))
    19                                           
    20                                               # Allocate memory for output
    21                                               # start = time.time()
    22         1         41.0     41.0      2.6      output = torch.empty((len(bags), len(NN_out[0])))
    23                                           
    24         5         31.0      6.2      2.0      for i, bag in enumerate(bags):
    25         4        399.0     99.8     25.7          output[i] = aggregation_func(NN_out[inner_ids == bag], dim = 0)
    26                                               
    27         1        118.0    118.0      7.6      output = afterNN(output.double())
    28                                               # print('Aggregation + afterNN | Elapsed time: {}'.format(time.time()-start))
    29                                           
    30                                           
    31         1          2.0      2.0      0.1      if (ids.shape[0] == 1):
    32                                                   return output
    33                                               else:
    34                                                   # start = time.time()
    35         1         17.0     17.0      1.1          ids = ids[:len(ids)-1]
    36         1         12.0     12.0      0.8          mask = torch.empty(0).long()
    37         5          8.0      1.6      0.5          for i in range(len(counts)):
    38         4        129.0     32.2      8.3              mask = torch.cat((mask, torch.sum(counts[:i], dtype = torch.int64).reshape(1)))
    39                                                   # print('Mask for ids | Elapsed time: {}'.format(time.time() - start))
    40         1         15.0     15.0      1.0          return (output, ids[:,mask])

